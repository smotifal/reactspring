{"version":3,"sources":["AppNavbar.js","GroupEdit.js","Home.js","GroupList.js","UserList.js","EventList.js","UserEdit.js","EventEdit.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isOpen","toggle","bind","assertThisInitialized","setState","react_default","a","createElement","Navbar","color","dark","expand","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","href","Component","GroupEdit","emptyItem","name","address","city","stateOrProvince","country","postalCode","item","handleChange","handleSubmit","match","params","id","fetch","concat","json","group","event","target","value","objectSpread","preventDefault","method","headers","Accept","Content-Type","body","JSON","stringify","history","push","title","AppNavbar_AppNavbar","Container","Form","onSubmit","FormGroup","Label","for","Input","type","onChange","autoComplete","Button","withRouter","Home","fluid","GroupList","groups","isLoading","remove","_this2","then","response","data","catch","rejected","alert","updatedGroups","toConsumableArray","_this3","filter","i","_this4","_this$state","groupList","map","key","style","whiteSpace","events","Intl","DateTimeFormat","year","month","day","format","Date","date","ButtonGroup","size","Table","width","UserList","users","console","log","user","email","EventList","updatedEvents","eventList","description","UserEdit","editMode","readOnly","EventEdit","App","BrowserRouter","Switch","Route","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a9f04f58.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Collapse, Nav, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\nexport default class AppNavbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {isOpen: false};\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  render() {\n    return <Navbar color=\"dark\" dark expand=\"md\">\n      <NavbarBrand tag={Link} to=\"/\">Home</NavbarBrand>\n      <NavbarToggler onClick={this.toggle}/>\n      <Collapse isOpen={this.state.isOpen} navbar>\n        <Nav className=\"ml-auto\" navbar>\n          <NavItem>\n            <NavLink\n              href=\"https://twitter.com/oktadev\">@oktadev</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://github.com/oktadeveloper/okta-spring-boot-react-crud-example\">GitHub</NavLink>\n          </NavItem>\n        </Nav>\n      </Collapse>\n    </Navbar>;\n  }\n}","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\n\nclass GroupEdit extends Component {\n\n  emptyItem = {\n    name: '',\n    address: '',\n    city: '',\n    stateOrProvince: '',\n    country: '',\n    postalCode: ''\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      item: this.emptyItem\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async componentDidMount() {\n    if (this.props.match.params.id !== 'new') {\n      const group = await (await fetch(`/api/group/${this.props.match.params.id}`)).json();\n      this.setState({item: group});\n    }\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    let item = {...this.state.item};\n    item[name] = value;\n    this.setState({item});\n\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    const {item} = this.state;\n    await fetch('/api/group', {\n      method: (item.id) ? 'PUT' : 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(item),\n    });\n    this.props.history.push('/groups');\n  }\n\n  render() {\n    const {item} = this.state;\n    const title = <h2>{item.id ? 'Edit Group' : 'Add Group'}</h2>;\n\n    return <div>\n      <AppNavbar/>\n      <Container>\n        {title}\n        <Form onSubmit={this.handleSubmit}>\n          <FormGroup>\n            <Label for=\"name\">Name</Label>\n            <Input type=\"text\" name=\"name\" id=\"name\" value={item.name || ''}\n                   onChange={this.handleChange} autoComplete=\"name\"/>\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"address\">Address</Label>\n            <Input type=\"text\" name=\"address\" id=\"address\" value={item.address || ''}\n                   onChange={this.handleChange} autoComplete=\"address-level1\"/>\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"city\">City</Label>\n            <Input type=\"text\" name=\"city\" id=\"city\" value={item.city || ''}\n                   onChange={this.handleChange} autoComplete=\"address-level1\"/>\n          </FormGroup>\n          <div className=\"row\">\n            <FormGroup className=\"col-md-4 mb-3\">\n              <Label for=\"stateOrProvince\">State/Province</Label>\n              <Input type=\"text\" name=\"stateOrProvince\" id=\"stateOrProvince\" value={item.stateOrProvince || ''}\n                     onChange={this.handleChange} autoComplete=\"address-level1\"/>\n            </FormGroup>\n            <FormGroup className=\"col-md-5 mb-3\">\n              <Label for=\"country\">Country</Label>\n              <Input type=\"text\" name=\"country\" id=\"country\" value={item.country || ''}\n                     onChange={this.handleChange} autoComplete=\"address-level1\"/>\n            </FormGroup>\n            <FormGroup className=\"col-md-3 mb-3\">\n              <Label for=\"country\">Postal Code</Label>\n              <Input type=\"text\" name=\"postalCode\" id=\"postalCode\" value={item.postalCode || ''}\n                     onChange={this.handleChange} autoComplete=\"address-level1\"/>\n            </FormGroup>\n          </div>\n          <FormGroup>\n            <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\n            <Button color=\"secondary\" tag={Link} to=\"/groups\">Cancel</Button>\n          </FormGroup>\n        </Form>\n      </Container>\n    </div>\n  }\n}\n\nexport default withRouter(GroupEdit);","import React, { Component } from 'react';\nimport './App.css';\nimport AppNavbar from './AppNavbar';\nimport { Link } from 'react-router-dom';\nimport { Button, Container } from 'reactstrap';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <AppNavbar/>\n        <Container fluid>\n          <Link to=\"/groups\"><Button color=\"link\">Manage groups</Button></Link>\n          <Link to=\"/users\"><Button color=\"link\">Manage users</Button></Link>\n          <Link to=\"/events\"><Button color=\"link\">Manage events</Button></Link>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { Link } from 'react-router-dom';\n\nclass GroupList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {groups: [], isLoading: true};\n    this.remove = this.remove.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({isLoading: true});\n    fetch('api/groups')\n      .then(response => response.json())\n      .then(data => this.setState({groups: data, isLoading: false}))\n      .catch(rejected => {\n        alert(\"Unable to connect the server, try later..\");\n      });\n  }\n\n  async remove(id) {\n    await fetch(`/api/group/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(() => {\n      let updatedGroups = [...this.state.groups].filter(i => i.id !== id);\n      this.setState({groups: updatedGroups});\n    });\n  }\n\n  render() {\n    const {groups, isLoading} = this.state;\n\n    if (isLoading) {\n      return <p>Loading...</p>;\n    }\n\n    const groupList = groups.map(group => {\n      const address = `${group.address || ''} ${group.city || ''} ${group.stateOrProvince || ''}`;\n      return <tr key={group.id}>\n        <td style={{whiteSpace: 'nowrap'}}>{group.name}</td>\n        <td>{address}</td>\n        <td>{group.events.map(event => {\n          return <div key={event.id}>{new Intl.DateTimeFormat('en-US', {\n            year: 'numeric',\n            month: 'long',\n            day: '2-digit'\n          }).format(new Date(event.date))}: {event.title}</div>\n        })}</td>\n        <td>\n          <ButtonGroup>\n            <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/groups/\" + group.id}>Edit</Button>\n            <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(group.id)}>Delete</Button>\n          </ButtonGroup>\n        </td>\n      </tr>\n    });\n\n    return (\n      <div>\n        <AppNavbar/>\n        <Container fluid>\n          <div className=\"float-right\">\n            <Button color=\"success\" tag={Link} to=\"/groups/new\">Add Group</Button>\n          </div>\n          <h3>My Groups</h3>\n          <Table className=\"mt-4\">\n            <thead>\n            <tr>\n              <th width=\"20%\">Name</th>\n              <th width=\"20%\">Location</th>\n              <th>Events</th>\n              <th width=\"10%\">Actions</th>\n            </tr>\n            </thead>\n            <tbody>\n            {groupList}\n            </tbody>\n          </Table>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default GroupList;","import React, { Component } from 'react';\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { Link } from 'react-router-dom';\n\nclass UserList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {users: [], isLoading: true};\n    this.remove = this.remove.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({isLoading: true});\n    console.log(\"Readin from database\");\n    fetch('api/users')\n      .then(response => response.json())\n      .then(data => this.setState({users: data, isLoading: false}))\n      .catch(rejected => {\n        alert(\"Unable to connect the server, try later..\")\n      });\n  }\n\n  async remove(name) {\n    await fetch(`/api/user/${name}`, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(() => {\n      //need to read from database because no id to compare\n      fetch('api/users')\n      .then(response => response.json())\n      .then(data => this.setState({users: data, isLoading: false}));\n      //let updatedUsers = [...this.state.users].filter(i => i.name !== name);\n      //this.setState({users: updatedUsers});\n    });\n  }\n\n  render() {\n    const {users, isLoading} = this.state;\n\n    if (isLoading) {\n      return <p>Loading...</p>;\n    }\n\n    const UserList = users.map(user => {\n      return <tr key={user.name}>\n        <td style={{whiteSpace: 'nowrap'}}>{user.name}</td>\n        <td style={{whiteSpace: 'nowrap'}}>{user.email}</td>\n        <td>\n          <ButtonGroup>\n            <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/users/\" + user.name}>Edit</Button>\n            <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(user.name)}>Delete</Button>\n          </ButtonGroup>\n        </td>\n      </tr>\n    });\n\n    return (\n      <div>\n        <AppNavbar/>\n        <Container fluid>\n          <div className=\"float-right\">\n            <Button color=\"success\" tag={Link} to=\"/users/new\">Add User</Button>\n          </div>\n          <h3>My JUG Tour</h3>\n          <Table className=\"mt-4\">\n            <thead>\n            <tr>\n              <th width=\"30%\">Name</th>\n              <th width=\"30%\">Email</th>\n            </tr>\n            </thead>\n            <tbody>\n            {UserList}\n            </tbody>\n          </Table>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default UserList;","import React, { Component } from 'react';\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { Link } from 'react-router-dom';\n\nclass EventList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {events: [], isLoading: true};\n    this.remove = this.remove.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({isLoading: true});\n    fetch('api/events')\n      .then(response => response.json())\n      .then(data => this.setState({events: data, isLoading: false}))\n      .catch(rejected => {\n        alert(\"Unable to connect the server, try later..\");\n      });\n  }\n\n  async remove(id) {\n    await fetch(`/api/event/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(() => {\n      let updatedEvents = [...this.state.events].filter(i => i.id !== id);\n      this.setState({events: updatedEvents});\n    });\n  }\n\n  render() {\n    const {events, isLoading} = this.state;\n\n    if (isLoading) {\n      return <p>Loading...</p>;\n    }\n\n    const eventList = events.map(event => {\n      return <tr key={event.id}>\n        <td style={{whiteSpace: 'nowrap'}}>{event.date}</td>\n        <td style={{whiteSpace: 'nowrap'}}>{event.title}</td>\n        <td style={{whiteSpace: 'nowrap'}}>{event.description}</td>\n        <td>\n          <ButtonGroup>\n            <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/events/\" + event.id}>Edit</Button>\n            <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(event.id)}>Delete</Button>\n            <Button size=\"sm\" color=\"info\" tag={Link} to={\"/eventusers/\" + event.id}>Add participants</Button>\n          </ButtonGroup>\n        </td>\n      </tr>\n    });\n\n    return (\n      <div>\n        <AppNavbar/>\n        <Container fluid>\n          <div className=\"float-right\">\n            <Button color=\"success\" tag={Link} to=\"/events/new\">Add Event</Button>\n          </div>\n          <h3>Event list</h3>\n          <Table className=\"mt-4\">\n            <thead>\n            <tr>\n              <th width=\"20%\">Date</th>\n              <th width=\"30%\">Title</th>\n              <th width=\"30%\">Description</th>\n            </tr>\n            </thead>\n            <tbody>\n            {eventList}\n            </tbody>\n          </Table>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default EventList;","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\n\nclass UserEdit extends Component {\n  emptyItem = {\n    name: '',\n    email: ''\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      item: this.emptyItem,\n      editMode : true\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n\n  async componentDidMount() {\n    if (this.props.match.params.id !== 'new') {\n      this.setState({editMode: false});     //to disable changing the name\n      //console.log(\"Editing old \" + this.state.editMode);\n      const user = await (await fetch(`/api/user/${this.props.match.params.id}`)).json();\n      this.setState({item: user});\n    }\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    let item = {...this.state.item};\n    item[name] = value;\n    this.setState({item});\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    const {item} = this.state;\n\n    await fetch('/api/user', {\n      method: (item.id) ? 'PUT' : 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(item),\n    });\n    this.props.history.push('/users');\n  }\n\n  render() {\n    const {item} = this.state;\n    const title = <h2>{item.name ? 'Edit User' : 'Add User'}</h2>;\n    return <div>\n      <AppNavbar/>\n      <Container>\n        {title}\n        <Form onSubmit={this.handleSubmit}>\n          <FormGroup>\n            <Label for=\"name\">Name</Label>\n            <Input type=\"text\" readOnly={!this.state.editMode}  name=\"name\" id=\"name\" value={item.name || ''} //in case new readOnly is false \n                   onChange={this.handleChange} autoComplete=\"name\"/>\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"email\">Email</Label>\n            <Input type=\"email\" name=\"email\" id=\"email\" value={item.email || ''}\n                   onChange={this.handleChange} autoComplete=\"email\"/>\n          </FormGroup>\n          <FormGroup>\n            <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\n            <Button color=\"secondary\" tag={Link} to=\"/users\">Cancel</Button>\n          </FormGroup>\n        </Form>\n      </Container>\n    </div>\n  }\n}\n\nexport default withRouter(UserEdit);","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\n\nclass EventEdit extends Component {\n\n  emptyItem = {\n    date: '',\n    title: '',\n    description: ''\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      item: this.emptyItem\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async componentDidMount() {\n    if (this.props.match.params.id !== 'new') {\n      const event = await (await fetch(`/api/event/${this.props.match.params.id}`)).json();\n      this.setState({item: event});\n    }\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    let item = {...this.state.item};\n    item[name] = value;\n    this.setState({item});\n\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    const {item} = this.state;\n    await fetch('/api/event', {\n      method: (item.id) ? 'PUT' : 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(item),\n    });\n    this.props.history.push('/events');\n  }\n\n  render() {\n    const {item} = this.state;\n    const title = <h2>{item.id ? 'Edit Event' : 'Add Event'}</h2>;\n\n    return <div>\n      <AppNavbar/>\n      <Container>\n        {title}\n        <Form onSubmit={this.handleSubmit}>\n          <FormGroup>\n            <Label for=\"date\">Date</Label>\n            <Input type=\"text\" name=\"date\" id=\"date\" value={item.date || ''}\n                   onChange={this.handleChange} autoComplete=\"date\"/>\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"title\">Title</Label>\n            <Input type=\"text\" name=\"title\" id=\"title\" value={item.title || ''}\n                   onChange={this.handleChange} autoComplete=\"title\"/>\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"description\">Description</Label>\n            <Input type=\"text\" name=\"description\" id=\"description\" value={item.description || ''}\n                   onChange={this.handleChange} autoComplete=\"description\"/>\n          </FormGroup>\n          <FormGroup>\n            <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\n            <Button color=\"secondary\" tag={Link} to=\"/events\">Cancel</Button>\n          </FormGroup>\n        </Form>\n      </Container>\n    </div>\n  }\n}\n\nexport default withRouter(EventEdit);","//https://github.com/oktadeveloper/okta-spring-boot-react-crud-example\nimport React, { Component } from 'react';\nimport './App.css';\nimport GroupEdit from './GroupEdit';\nimport Home from './Home';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport GroupList from './GroupList';\nimport UserList from './UserList';\nimport EventList from './EventList';\nimport UserEdit from './UserEdit';\nimport EventEdit from './EventEdit';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route path='/' exact={true} component={Home}/>\n          <Route path='/groups' exact={true} component={GroupList}/>\n          <Route path='/users' exact={true} component={UserList}/>\n          <Route path='/events' exact={true} component={EventList}/>\n          <Route path='/users/:id' component={UserEdit}/>\n          <Route path='/groups/:id' component={GroupEdit}/>\n          <Route path='/events/:id' component={EventEdit}/>\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}